/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */


package org.BB.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import org.BB.language.psi.BBTypes;
import com.intellij.pom.java.LanguageLevel;

@SuppressWarnings("ALL")

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>bb.flex</tt>
 */
class _BBLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\41\0\1\53\4\0\1\41\1\0\1\42\1\43\1\57\1\55\1\51\1\56\1\52\1\60\1\5\11\1\1"+
    "\54\1\50\1\37\1\36\1\40\1\0\1\61\1\3\1\7\4\3\5\0\1\4\13\0\1\6\2\0\1\46\1\0"+
    "\1\47\1\0\1\2\1\0\1\15\1\21\1\23\1\27\1\13\1\14\1\34\1\24\1\25\1\0\1\22\1"+
    "\16\1\30\1\20\1\26\1\32\1\0\1\11\1\17\1\10\1\12\1\0\1\33\1\31\1\35\1\0\1\44"+
    "\1\0\1\45\202\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\13\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\2\22\0\1\30\5\0\1\31\1\0\1\32"+
    "\1\33\1\0\1\34\10\0\1\35\3\0\1\36\6\0"+
    "\1\37\4\0\1\40\1\41\1\0\1\42\1\0\1\43"+
    "\1\44\5\0\1\45\2\0\1\46\1\0\1\47\12\0"+
    "\1\50\1\51\1\0\1\52\1\53\1\54\6\0\1\55"+
    "\1\56\2\0\1\57\2\0\1\60\1\0\1\61\1\0"+
    "\1\62\3\0\1\63\1\64\1\65\1\66\2\0\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee"+
    "\0\62\0\62\0\62\0\62\0\62\0\62\0\62\0\62"+
    "\0\62\0\62\0\62\0\u0320\0\62\0\u0352\0\62\0\u0384"+
    "\0\62\0\62\0\62\0\62\0\u03b6\0\u03e8\0\u041a\0\u044c"+
    "\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc"+
    "\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a\0\62"+
    "\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\62\0\u0866\0\62"+
    "\0\62\0\u0898\0\62\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992"+
    "\0\u09c4\0\u09f6\0\u0a28\0\62\0\u0a5a\0\u0a8c\0\u0abe\0\62"+
    "\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\62\0\u0c1c"+
    "\0\u0c4e\0\u0c80\0\u0cb2\0\62\0\62\0\u0ce4\0\62\0\u0d16"+
    "\0\62\0\62\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\62"+
    "\0\u0e42\0\u0e74\0\62\0\u0ea6\0\62\0\u0ed8\0\u0f0a\0\u0f3c"+
    "\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a\0\62"+
    "\0\62\0\u10cc\0\62\0\62\0\62\0\u10fe\0\u1130\0\u1162"+
    "\0\u1194\0\u11c6\0\u11f8\0\62\0\62\0\u122a\0\u125c\0\62"+
    "\0\u128e\0\u12c0\0\62\0\u12f2\0\62\0\u1324\0\62\0\u1356"+
    "\0\u1388\0\u13ba\0\62\0\62\0\62\0\62\0\u13ec\0\u141e"+
    "\0\62";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\3\2\1\4\2\2\1\5\1\6\1\2"+
    "\1\7\1\10\2\2\1\11\1\12\1\13\1\2\1\14"+
    "\1\2\1\15\1\2\1\16\2\2\1\17\3\2\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\63\0\2\3\1\0\1\44\1\3"+
    "\10\0\1\44\44\0\2\3\1\0\1\44\1\3\1\45"+
    "\1\3\6\0\1\44\2\0\1\3\7\0\1\45\41\0"+
    "\1\46\12\0\1\47\50\0\1\50\64\0\1\51\1\0"+
    "\1\52\10\0\1\53\42\0\1\54\2\0\1\55\10\0"+
    "\1\56\45\0\1\57\20\0\1\60\40\0\1\61\1\62"+
    "\57\0\1\63\65\0\1\64\1\65\5\0\1\66\1\0"+
    "\1\67\47\0\1\70\3\0\1\71\7\0\1\72\44\0"+
    "\1\73\12\0\1\74\50\0\1\75\102\0\1\76\75\0"+
    "\1\77\63\0\1\100\45\0\1\101\22\0\3\45\1\44"+
    "\1\45\1\0\1\45\3\0\3\45\1\44\2\0\1\45"+
    "\1\0\1\45\3\0\1\45\44\0\1\102\22\0\1\103"+
    "\35\0\1\104\13\0\1\105\44\0\1\106\70\0\1\107"+
    "\54\0\1\110\57\0\1\111\71\0\1\112\57\0\1\113"+
    "\54\0\1\114\102\0\1\115\54\0\1\116\52\0\1\117"+
    "\76\0\1\120\41\0\1\121\56\0\1\122\6\0\1\123"+
    "\57\0\1\124\61\0\1\125\64\0\1\126\51\0\1\127"+
    "\103\0\1\130\43\0\1\131\57\0\1\132\72\0\1\133"+
    "\110\0\1\134\22\0\1\135\74\0\1\136\52\0\1\137"+
    "\54\0\1\140\62\0\1\141\76\0\1\142\44\0\1\143"+
    "\71\0\1\144\55\0\1\145\55\0\1\146\56\0\1\147"+
    "\67\0\1\150\60\0\1\151\67\0\1\152\51\0\1\153"+
    "\65\0\1\154\53\0\1\155\60\0\1\156\67\0\1\157"+
    "\7\0\1\160\50\0\1\161\65\0\1\162\62\0\1\163"+
    "\72\0\1\164\37\0\1\165\70\0\1\166\51\0\1\167"+
    "\64\0\1\170\57\0\1\171\73\0\1\172\60\0\1\173"+
    "\63\0\1\174\54\0\1\175\67\0\1\176\47\0\1\177"+
    "\57\0\1\200\62\0\1\201\65\0\1\202\60\0\1\203"+
    "\63\0\1\204\62\0\1\205\70\0\1\206\57\0\1\207"+
    "\60\0\1\210\55\0\1\211\71\0\1\212\41\0\1\213"+
    "\67\0\1\214\56\0\1\215\102\0\1\216\44\0\1\217"+
    "\70\0\1\220\45\0\1\221\62\0\1\222\56\0\1\223"+
    "\64\0\1\224\66\0\1\225\54\0\1\226\66\0\1\227"+
    "\51\0\1\230\70\0\1\231\42\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5200];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\16\1\13\11\1\1\1\11\1\1\1\11"+
    "\1\1\4\11\1\1\22\0\1\11\5\0\1\11\1\0"+
    "\2\11\1\0\1\11\10\0\1\11\3\0\1\11\6\0"+
    "\1\11\4\0\2\11\1\0\1\11\1\0\2\11\5\0"+
    "\1\11\2\0\1\11\1\0\1\11\12\0\2\11\1\0"+
    "\3\11\6\0\2\11\2\0\1\11\2\0\1\11\1\0"+
    "\1\11\1\0\1\11\3\0\4\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


 public  _BBLexer() {
            this(null);
          }




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _BBLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 56: break;
          case 2: 
            { return BBTypes.INTEGER_LITERAL;
            } 
            // fall through
          case 57: break;
          case 3: 
            { return BBTypes.ASSIGN;
            } 
            // fall through
          case 58: break;
          case 4: 
            { return BBTypes.LESS_THAN;
            } 
            // fall through
          case 59: break;
          case 5: 
            { return BBTypes.GREATER_THAN;
            } 
            // fall through
          case 60: break;
          case 6: 
            { return BBTypes.AND;
            } 
            // fall through
          case 61: break;
          case 7: 
            { return BBTypes.OPEN_BRACE;
            } 
            // fall through
          case 62: break;
          case 8: 
            { return BBTypes.CLOSE_BRACE;
            } 
            // fall through
          case 63: break;
          case 9: 
            { return BBTypes.OPEN_BRACKETS;
            } 
            // fall through
          case 64: break;
          case 10: 
            { return BBTypes.CLOSE_BRACKETS;
            } 
            // fall through
          case 65: break;
          case 11: 
            { return BBTypes.LSQUAREBRACKET;
            } 
            // fall through
          case 66: break;
          case 12: 
            { return BBTypes.RSQUAREBRACKET;
            } 
            // fall through
          case 67: break;
          case 13: 
            { return BBTypes.SEMI_COLON;
            } 
            // fall through
          case 68: break;
          case 14: 
            { return BBTypes.COMMA;
            } 
            // fall through
          case 69: break;
          case 15: 
            { return BBTypes.DOT;
            } 
            // fall through
          case 70: break;
          case 16: 
            { return BBTypes.NOT;
            } 
            // fall through
          case 71: break;
          case 17: 
            { return BBTypes.COLON;
            } 
            // fall through
          case 72: break;
          case 18: 
            { return BBTypes.ADD;
            } 
            // fall through
          case 73: break;
          case 19: 
            { return BBTypes.MINUS;
            } 
            // fall through
          case 74: break;
          case 20: 
            { return BBTypes.MULTIPLY;
            } 
            // fall through
          case 75: break;
          case 21: 
            { return BBTypes.DIVIDE;
            } 
            // fall through
          case 76: break;
          case 22: 
            { return BBTypes.AT;
            } 
            // fall through
          case 77: break;
          case 23: 
            { return BBTypes.LONG_LITERAL;
            } 
            // fall through
          case 78: break;
          case 24: 
            { return BBTypes.IF;
            } 
            // fall through
          case 79: break;
          case 25: 
            { return BBTypes.EQUAL;
            } 
            // fall through
          case 80: break;
          case 26: 
            { return BBTypes.COLONCOLON;
            } 
            // fall through
          case 81: break;
          case 27: 
            { return BBTypes.ARROW;
            } 
            // fall through
          case 82: break;
          case 28: 
            { return BBTypes.TRY;
            } 
            // fall through
          case 83: break;
          case 29: 
            { return BBTypes.FOR;
            } 
            // fall through
          case 84: break;
          case 30: 
            { return BBTypes.NEW;
            } 
            // fall through
          case 85: break;
          case 31: 
            { return BBTypes.INT;
            } 
            // fall through
          case 86: break;
          case 32: 
            { return BBTypes.DOT_DOT;
            } 
            // fall through
          case 87: break;
          case 33: 
            { return BBTypes.TRUE;
            } 
            // fall through
          case 88: break;
          case 34: 
            { return BBTypes.THIS;
            } 
            // fall through
          case 89: break;
          case 35: 
            { return BBTypes.ELSE;
            } 
            // fall through
          case 90: break;
          case 36: 
            { return  BBTypes.ENUM ;
            } 
            // fall through
          case 91: break;
          case 37: 
            { return BBTypes.NULL;
            } 
            // fall through
          case 92: break;
          case 38: 
            { return BBTypes.CASE;
            } 
            // fall through
          case 93: break;
          case 39: 
            { return BBTypes.CHAR;
            } 
            // fall through
          case 94: break;
          case 40: 
            { return BBTypes.FALSE;
            } 
            // fall through
          case 95: break;
          case 41: 
            { return BBTypes.SUPER;
            } 
            // fall through
          case 96: break;
          case 42: 
            { return BBTypes.BREAK;
            } 
            // fall through
          case 97: break;
          case 43: 
            { return BBTypes.CATCH;
            } 
            // fall through
          case 98: break;
          case 44: 
            { return BBTypes.CLASS;
            } 
            // fall through
          case 99: break;
          case 45: 
            { return BBTypes.THROW;
            } 
            // fall through
          case 100: break;
          case 46: 
            { return BBTypes.RETURN;
            } 
            // fall through
          case 101: break;
          case 47: 
            { return BBTypes.SWITCH;
            } 
            // fall through
          case 102: break;
          case 48: 
            { return BBTypes.IMPORT;
            } 
            // fall through
          case 103: break;
          case 49: 
            { return BBTypes.DOUBLE;
            } 
            // fall through
          case 104: break;
          case 50: 
            { return BBTypes.EXTENDS;
            } 
            // fall through
          case 105: break;
          case 51: 
            { return BBTypes.DEFAULT;
            } 
            // fall through
          case 106: break;
          case 52: 
            { return BBTypes.PACKAGE;
            } 
            // fall through
          case 107: break;
          case 53: 
            { return BBTypes.FUNCTION;
            } 
            // fall through
          case 108: break;
          case 54: 
            { return BBTypes.CONTINUE;
            } 
            // fall through
          case 109: break;
          case 55: 
            { return BBTypes.IMPLEMENTS;
            } 
            // fall through
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
